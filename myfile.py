import logging
import asyncio
import nest_asyncio
import requests
import datetime
import json
import os
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder, CommandHandler, ContextTypes,
    CallbackQueryHandler, MessageHandler, filters, ConversationHandler
)

# –ü—Ä–∏–º–µ–Ω—è–µ–º –ø–∞—Ç—á –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –≤–ª–æ–∂–µ–Ω–Ω—ã—Ö event loop (–Ω–∞–ø—Ä–∏–º–µ—Ä, –≤ Jupyter)
nest_asyncio.apply()

# –î–∞–Ω–Ω—ã–µ –±–æ—Ç–∞ –∏ –∫–∞–Ω–∞–ª–∞
BOT_TOKEN = "7773092319:AAFwirYylj1qOYcUxDlCJCczG5C0bBWZPMo"  # –¢–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –±–æ—Ç–∞
GIFT_URL = f"https://api.telegram.org/bot{BOT_TOKEN}/getAvailableGifts"
ADMIN_CHAT_ID = 531669581

# –ß–∏—Å–ª–æ–≤–æ–π ID –∫–∞–Ω–∞–ª–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏ (—Å –ø—Ä–µ—Ñ–∏–∫—Å–æ–º -100)
CHANNEL_ID = -1002350477905
# –°—Å—ã–ª–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª (–¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è")
CHANNEL_URL = "https://t.me/giftgemble"

logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logger = logging.getLogger(__name__)

USERS_FILE = "users.json"


def load_users() -> set:
    if os.path.exists(USERS_FILE):
        try:
            with open(USERS_FILE, "r", encoding="utf-8") as f:
                data = json.load(f)
                return set(data)
        except Exception as e:
            logger.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: %s", e)
    return set()


def save_users(users: set) -> None:
    try:
        with open(USERS_FILE, "w", encoding="utf-8") as f:
            json.dump(list(users), f)
    except Exception as e:
        logger.error("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: %s", e)


# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
users = load_users()

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –¥–∏–∞–ª–æ–≥–æ–≤
CONTACT_MESSAGE = 1
ADMIN_REPLY = 2

# –û–ø—Ü–∏–∏ –ø–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö)
FREQUENCY_OPTIONS = {
    "–¢–æ–ª—å–∫–æ –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ –Ω–æ–≤—ã—Ö –ø–æ–¥–∞—Ä–∫–æ–≤": None,
    "–ö–∞–∂–¥—ã–π –¥–µ–Ω—å": 86400,
    "–ö–∞–∂–¥—ã–µ 6 —á–∞—Å–æ–≤": 21600,
    "–ö–∞–∂–¥—ã–π —á–∞—Å": 3600,
    "–ö–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç": 600,
    "–ö–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç": 300,
    "–ö–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É": 60
}


# ====================================================================
# –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏
# ====================================================================
async def ensure_subscription(update: Update, context: ContextTypes.DEFAULT_TYPE) -> bool:
    user_id = update.effective_user.id
    try:
        member = await context.bot.get_chat_member(CHANNEL_ID, user_id)
        logger.info("–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %s: —Å—Ç–∞—Ç—É—Å %s", user_id, member.status)
        if member.status not in ["left", "kicked"]:
            return True
        else:
            keyboard = InlineKeyboardMarkup([
                [InlineKeyboardButton("–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è", url=CHANNEL_URL)],
                [InlineKeyboardButton("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="check_subscription")]
            ])
            if update.message:
                await update.message.reply_text(
                    "–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª.",
                    reply_markup=keyboard
                )
            elif update.callback_query:
                await update.callback_query.message.reply_text(
                    "–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª.",
                    reply_markup=keyboard
                )
            return False
    except Exception as e:
        logger.error("–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏: %s", e)
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è", url=CHANNEL_URL)],
            [InlineKeyboardButton("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="check_subscription")]
        ])
        if update.message:
            await update.message.reply_text(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ –±–æ—Ç —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –∫–∞–Ω–∞–ª–∞.",
                reply_markup=keyboard
            )
        elif update.callback_query:
            await update.callback_query.message.reply_text(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ –±–æ—Ç —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –∫–∞–Ω–∞–ª–∞.",
                reply_markup=keyboard
            )
        return False


async def check_subscription_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await update.callback_query.answer()
    if await ensure_subscription(update, context):
        text = "–í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –∫–∞–Ω–∞–ª!"
    else:
        text = "–í—ã –≤—Å—ë –µ—â—ë –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª."
    keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton("‚Ü©Ô∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="back_to_menu")]
    ])
    await update.callback_query.edit_message_text(text=text, reply_markup=keyboard)


# ====================================================================
# –û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é –∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –±–æ—Ç–∞
# ====================================================================
def get_main_menu_text(is_active: bool, frequency_label: str) -> str:
    if not is_active:
        return (
            "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç-–æ–ø–æ–≤–µ—â–∞—Ç–µ–ª—å, –∏–Ω—Ñ–æ—Ä–º–∏—Ä—É—é—â–∏–π –≤–∞—Å –æ –≤—ã–ø—É—Å–∫–µ –Ω–æ–≤—ã—Ö –ø–æ–¥–∞—Ä–∫–æ–≤.\n\n"
            "<b>–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ‚ñ∂Ô∏è –°–¢–ê–†–¢ –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –ø–æ–∏—Å–∫ –ø–æ–¥–∞—Ä–∫–æ–≤.</b>\n\n"
            "–°—Ç–∞—Ç—É—Å: –ø–æ–∏—Å–∫ –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω üî¥\n"
            f"–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π: <i>{frequency_label}</i>\n\n"
            "<code>Version: 3.0</code>"
        )
    else:
        return (
            "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç-–æ–ø–æ–≤–µ—â–∞—Ç–µ–ª—å, –∏–Ω—Ñ–æ—Ä–º–∏—Ä—É—é—â–∏–π –≤–∞—Å –æ –≤—ã–ø—É—Å–∫–µ –Ω–æ–≤—ã—Ö –ø–æ–¥–∞—Ä–∫–æ–≤.\n\n"
            "<b>–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ‚èπ –°–¢–û–ü –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–æ–∏—Å–∫ –ø–æ–¥–∞—Ä–∫–æ–≤.</b>\n\n"
            "–°—Ç–∞—Ç—É—Å: –ø–æ–∏—Å–∫ –∞–∫—Ç–∏–≤–µ–Ω üü¢\n"
            f"–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π: <i>{frequency_label}</i>\n\n"
            "<code>Version: 3.0</code>"
        )


def get_main_menu_keyboard(is_active: bool) -> InlineKeyboardMarkup:
    toggle_text = "‚ñ∂Ô∏è –°–¢–ê–†–¢" if not is_active else "‚èπ –°–¢–û–ü"
    toggle_button = InlineKeyboardButton(toggle_text, callback_data="toggle_start")
    how_button = InlineKeyboardButton("‚ùì –ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –±–æ—Ç?", callback_data="how_it_works")
    settings_button = InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="settings")
    contact_button = InlineKeyboardButton("üí¨ –°–≤—è–∑–∞—Ç—å—Å—è —Å –∞–¥–º–∏–Ω–æ–º", callback_data="contact_admin")
    return InlineKeyboardMarkup([[toggle_button], [how_button, settings_button], [contact_button]])


async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ, –µ—Å–ª–∏ –µ–≥–æ —Ç–∞–º –Ω–µ—Ç
    user_id = update.effective_user.id
    if user_id not in users:
        users.add(user_id)
        save_users(users)
    if not await ensure_subscription(update, context):
        return
    context.chat_data.setdefault("monitoring_active", False)
    context.chat_data.setdefault("notification_frequency", None)
    context.chat_data.setdefault("notification_frequency_label", "—Ç–æ–ª—å–∫–æ –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ –Ω–æ–≤—ã—Ö –ø–æ–¥–∞—Ä–∫–æ–≤")
    text = get_main_menu_text(context.chat_data["monitoring_active"],
                              context.chat_data["notification_frequency_label"])
    keyboard = get_main_menu_keyboard(context.chat_data["monitoring_active"])
    await update.message.reply_text(text, reply_markup=keyboard, parse_mode="HTML")


async def monitor_gifts(chat_id: int, context: ContextTypes.DEFAULT_TYPE) -> None:
    previous_gift_ids = set()
    first_run = True
    while context.chat_data.get("monitoring_active", False):
        try:
            response = requests.get(GIFT_URL)
            if response.status_code == 200:
                data = response.json()
                if data.get("ok"):
                    gifts = data.get("result", {}).get("gifts", [])
                    current_gift_ids = {gift.get("id") for gift in gifts if gift.get("id")}
                    if first_run:
                        previous_gift_ids = current_gift_ids
                        first_run = False
                    else:
                        new_gifts = current_gift_ids - previous_gift_ids
                        if new_gifts:
                            context.chat_data["last_gift_found"] = datetime.datetime.now()
                            for _ in range(3):
                                await context.bot.send_message(chat_id=chat_id, text="–ü–æ–¥–∞—Ä–∫–∏ –Ω–∞–π–¥–µ–Ω—ã!!!")
                        previous_gift_ids = current_gift_ids
                else:
                    logger.error("–û—à–∏–±–∫–∞ API: %s", data)
            else:
                logger.error("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: —Å—Ç–∞—Ç—É—Å %s", response.status_code)
        except Exception as e:
            logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–µ –ø–æ–¥–∞—Ä–∫–æ–≤: %s", e)
        await asyncio.sleep(0.5)
    logger.info("–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø–æ–¥–∞—Ä–∫–æ–≤ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –¥–ª—è —á–∞—Ç–∞ %s", chat_id)


async def periodic_notification(chat_id: int, context: ContextTypes.DEFAULT_TYPE, period: int) -> None:
    while context.chat_data.get("monitoring_active", False) and context.chat_data.get(
            "notification_frequency") == period:
        await asyncio.sleep(period)
        last_found = context.chat_data.get("last_gift_found")
        now = datetime.datetime.now()
        if not last_found or (now - last_found).total_seconds() >= period:
            await context.bot.send_message(chat_id=chat_id, text="–ù–æ–≤—ã—Ö –ø–æ–¥–∞—Ä–∫–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü—Ä–æ–¥–æ–ª–∂–∞—é –ø–æ–∏—Å–∫...")
    logger.info("–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –¥–ª—è —á–∞—Ç–∞ %s", chat_id)


async def toggle_start_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if not await ensure_subscription(update, context):
        return
    query = update.callback_query
    await query.answer()
    chat_id = query.message.chat_id
    monitoring_active = context.chat_data.get("monitoring_active", False)
    if not monitoring_active:
        context.chat_data["monitoring_active"] = True
        context.chat_data["last_gift_found"] = None
        context.chat_data["gift_task"] = asyncio.create_task(monitor_gifts(chat_id, context))
        freq = context.chat_data.get("notification_frequency")
        if freq:
            context.chat_data["notification_task"] = asyncio.create_task(periodic_notification(chat_id, context, freq))
    else:
        context.chat_data["monitoring_active"] = False
        if "gift_task" in context.chat_data:
            context.chat_data["gift_task"].cancel()
        if "notification_task" in context.chat_data:
            context.chat_data["notification_task"].cancel()
    text = get_main_menu_text(
        context.chat_data.get("monitoring_active", False),
        context.chat_data.get("notification_frequency_label", "—Ç–æ–ª—å–∫–æ –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ –Ω–æ–≤—ã—Ö –ø–æ–¥–∞—Ä–∫–æ–≤")
    )
    keyboard = get_main_menu_keyboard(context.chat_data.get("monitoring_active", False))
    await query.edit_message_text(text=text, reply_markup=keyboard, parse_mode="HTML")


async def settings_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if not await ensure_subscription(update, context):
        return
    query = update.callback_query
    await query.answer()
    keyboard = []
    for label, seconds in FREQUENCY_OPTIONS.items():
        callback_data = f"set_freq_{seconds}" if seconds is not None else "set_freq_default"
        keyboard.append([InlineKeyboardButton(label, callback_data=callback_data)])
    keyboard.append([InlineKeyboardButton("‚Ü©Ô∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="back_to_menu")])
    reply_markup = InlineKeyboardMarkup(keyboard)
    text = "–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:"
    await query.edit_message_text(text=text, reply_markup=reply_markup)


async def set_frequency_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if not await ensure_subscription(update, context):
        return
    query = update.callback_query
    await query.answer()
    data = query.data
    if data == "set_freq_default":
        context.chat_data["notification_frequency"] = None
        context.chat_data["notification_frequency_label"] = "—Ç–æ–ª—å–∫–æ –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ –Ω–æ–≤—ã—Ö –ø–æ–¥–∞—Ä–∫–æ–≤"
        if "notification_task" in context.chat_data:
            context.chat_data["notification_task"].cancel()
    else:
        try:
            seconds = int(data.split("_")[-1])
            context.chat_data["notification_frequency"] = seconds
            for label, sec in FREQUENCY_OPTIONS.items():
                if sec == seconds:
                    context.chat_data["notification_frequency_label"] = label
                    break
            chat_id = query.message.chat_id
            if context.chat_data.get("monitoring_active", False):
                if "notification_task" in context.chat_data:
                    context.chat_data["notification_task"].cancel()
                context.chat_data["notification_task"] = asyncio.create_task(
                    periodic_notification(chat_id, context, seconds))
        except Exception as e:
            logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –ø–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç–∏: %s", e)
    keyboard = get_main_menu_keyboard(context.chat_data.get("monitoring_active", False))
    text = get_main_menu_text(
        context.chat_data.get("monitoring_active", False),
        context.chat_data.get("notification_frequency_label", "—Ç–æ–ª—å–∫–æ –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ –Ω–æ–≤—ã—Ö –ø–æ–¥–∞—Ä–∫–æ–≤")
    )
    await query.edit_message_text(text=text, reply_markup=keyboard, parse_mode="HTML")


async def how_it_works_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if not await ensure_subscription(update, context):
        return
    query = update.callback_query
    await query.answer()
    explanation = (
        "<b>–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º?</b>\n"
        "‚Ä¢ –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ‚ñ∂Ô∏è –°–¢–ê–†–¢ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ–¥–∞—Ä–∫–æ–≤.\n"
        "‚Ä¢ –í —Ä–∞–∑–¥–µ–ª–µ <i>‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏</i> –≤—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.\n"
        "‚Ä¢ –ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–Ω—É—Ç –≤–æ–ø—Ä–æ—Å—ã ‚Äî –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É <i>üí¨ –°–≤—è–∑–∞—Ç—å—Å—è —Å –∞–¥–º–∏–Ω–æ–º</i>.\n\n"
        "<b>–ü—Ä–∏–Ω—Ü–∏–ø —Ä–∞–±–æ—Ç—ã:</b>\n"
        "–ë–æ—Ç –∫–∞–∂–¥—ã–µ 0.5 —Å–µ–∫—É–Ω–¥—ã –æ–ø—Ä–∞—à–∏–≤–∞–µ—Ç API –¥–ª—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –Ω–æ–≤—ã—Ö –ø–æ–¥–∞—Ä–∫–æ–≤. –ï—Å–ª–∏ –Ω–æ–≤—ã–µ –ø–æ–¥–∞—Ä–∫–∏ –Ω–∞—Ö–æ–¥—è—Ç—Å—è, –æ–Ω –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Ç—Ä–∏ —Ä–∞–∑–∞. "
        "–ü—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π, –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫, –±–æ—Ç –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ —Å–æ–æ–±—â–∞–µ—Ç, —á—Ç–æ –ø–æ–∏—Å–∫ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è. "
        "–í—Å–µ –ø—Ä–æ—Ü–µ—Å—Å—ã —Ä–∞–±–æ—Ç–∞—é—Ç –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ, —á—Ç–æ –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç —Å—Ç–∞–±–∏–ª—å–Ω—É—é —Ä–∞–±–æ—Ç—É 24/7."
    )
    keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton("‚Ü©Ô∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="back_to_menu")]
    ])
    await query.edit_message_text(text=explanation, reply_markup=keyboard, parse_mode="HTML")


async def back_to_menu_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if not await ensure_subscription(update, context):
        return
    query = update.callback_query
    await query.answer()
    text = get_main_menu_text(
        context.chat_data.get("monitoring_active", False),
        context.chat_data.get("notification_frequency_label", "—Ç–æ–ª—å–∫–æ –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ –Ω–æ–≤—ã—Ö –ø–æ–¥–∞—Ä–∫–æ–≤")
    )
    keyboard = get_main_menu_keyboard(context.chat_data.get("monitoring_active", False))
    await query.edit_message_text(text=text, reply_markup=keyboard, parse_mode="HTML")


# ====================================================================
# –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª —Å–≤—è–∑–∏ —Å –∞–¥–º–∏–Ω–æ–º
# ====================================================================
async def contact_admin_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    if not await ensure_subscription(update, context):
        return ConversationHandler.END
    query = update.callback_query
    await query.answer()
    await query.message.reply_text("–ù–∞–ø–∏—à–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É. –ú–æ–∂–Ω–æ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.")
    return CONTACT_MESSAGE


async def retry_contact_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    if not await ensure_subscription(update, context):
        return ConversationHandler.END
    query = update.callback_query
    await query.answer()
    await query.message.reply_text(
        "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –µ—â—ë —Ä–∞–∑. –ú–æ–∂–Ω–æ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.")
    return CONTACT_MESSAGE


async def admin_message_received(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user = update.effective_user
    user_chat_id = update.effective_chat.id
    now = datetime.datetime.now().strftime("%d.%m.%Y %H:%M:%S")
    header = f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –æ—Ç: {user.username or user.full_name} (ID: {user_chat_id})\n–í: {now}\n\n"
    user_text = update.message.text if update.message.text else ""
    final_text = header + user_text
    try:
        if update.message.photo:
            photo = update.message.photo[-1]
            sent_msg = await context.bot.send_photo(
                chat_id=ADMIN_CHAT_ID,
                photo=photo.file_id,
                caption=final_text,
            )
        else:
            sent_msg = await context.bot.send_message(
                chat_id=ADMIN_CHAT_ID,
                text=final_text,
            )
        reply_button = InlineKeyboardMarkup([
            [InlineKeyboardButton("–û—Ç–≤–µ—Ç–∏—Ç—å", callback_data=f"reply_{user_chat_id}")]
        ])
        await context.bot.edit_message_reply_markup(
            chat_id=ADMIN_CHAT_ID,
            message_id=sent_msg.message_id,
            reply_markup=reply_button
        )
        user_keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("‚Ü©Ô∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="back_to_menu")]
        ])
        await update.message.reply_text(
            "–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
            reply_markup=user_keyboard
        )
        return ConversationHandler.END
    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –∞–¥–º–∏–Ω—É: %s", e)
        error_keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data="retry_contact")],
            [InlineKeyboardButton("‚Ü©Ô∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="back_to_menu")]
        ])
        await update.message.reply_text(
            "–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –∏–ª–∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –º–µ–Ω—é.",
            reply_markup=error_keyboard
        )
        return ConversationHandler.END


async def cancel_contact(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    await update.message.reply_text("–û—Ç–º–µ–Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è.")
    return ConversationHandler.END


async def admin_reply_start_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    if update.effective_user.id != ADMIN_CHAT_ID:
        await update.callback_query.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è.", show_alert=True)
        return ConversationHandler.END
    await update.callback_query.answer()
    try:
        data = update.callback_query.data  # —Ñ–æ—Ä–º–∞—Ç "reply_{user_id}"
        target_user_id = int(data.split("_")[1])
        context.user_data["reply_target"] = target_user_id
        await update.callback_query.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –æ—Ç–≤–µ—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:")
        return ADMIN_REPLY
    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—á–∞–ª–µ –æ—Ç–≤–µ—Ç–∞: %s", e)
        await update.callback_query.message.reply_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –æ—Ç–≤–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return ConversationHandler.END


async def admin_reply_received(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    target_user_id = context.user_data.get("reply_target")
    if not target_user_id:
        await update.message.reply_text("–¶–µ–ª–µ–≤–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return ConversationHandler.END
    try:
        admin_reply = update.message.text or "–û—Ç–≤–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"
        final_reply = "–í—ã –ø–æ–ª—É—á–∏–ª–∏ –æ—Ç–≤–µ—Ç –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:\n\n" + admin_reply
        if update.message.photo:
            photo = update.message.photo[-1]
            await context.bot.send_photo(
                chat_id=target_user_id,
                photo=photo.file_id,
                caption=final_reply
            )
        else:
            await context.bot.send_message(
                chat_id=target_user_id,
                text=final_reply
            )
        await update.message.reply_text("–í–∞—à –æ—Ç–≤–µ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.")
        return ConversationHandler.END
    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: %s", e)
        await update.message.reply_text("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.")
        return ConversationHandler.END


# ====================================================================
# –§—É–Ω–∫—Ü–∏—è /announce ‚Äì —Ä–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)
# ====================================================================
async def announce_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if update.effective_user.id != ADMIN_CHAT_ID:
        await update.message.reply_text("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω!")
        return
    args = context.args
    if not args:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /announce <—Ç–µ–∫—Å—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏—è>")
        return
    announcement = " ".join(args)
    sent_count = 0
    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ —Ñ–∞–π–ª–∞ (–Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ –≥–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –Ω–µ –∞–∫—Ç—É–∞–ª—å–Ω–∞)
    user_ids = load_users()
    for user_id in user_ids:
        try:
            await context.bot.send_message(chat_id=user_id, text=announcement)
            sent_count += 1
        except Exception as e:
            logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é %s: %s", user_id, e)
    await update.message.reply_text(f"–û–±—ä—è–≤–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {sent_count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.")


# ====================================================================
# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∏ –∑–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
# ====================================================================
def main() -> None:
    application = ApplicationBuilder().token(BOT_TOKEN).build()

    # –û—Å–Ω–æ–≤–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ /start –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    application.add_handler(CommandHandler("start", start_command))
    # –ö–æ–º–∞–Ω–¥–∞ /announce –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)
    application.add_handler(CommandHandler("announce", announce_command))

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏ (–ø–æ –∫–Ω–æ–ø–∫–µ "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É")
    application.add_handler(CallbackQueryHandler(check_subscription_callback, pattern="^check_subscription$"))
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –ø–æ–∏—Å–∫–∞ –ø–æ–¥–∞—Ä–∫–æ–≤
    application.add_handler(CallbackQueryHandler(toggle_start_callback, pattern="^toggle_start$"))
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ä–∞–∑–¥–µ–ª–∞ "–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –±–æ—Ç?" –∏ "–ù–∞—Å—Ç—Ä–æ–π–∫–∏"
    application.add_handler(CallbackQueryHandler(how_it_works_callback, pattern="^how_it_works$"))
    application.add_handler(CallbackQueryHandler(settings_callback, pattern="^settings$"))
    application.add_handler(CallbackQueryHandler(back_to_menu_callback, pattern="^back_to_menu$"))
    application.add_handler(CallbackQueryHandler(set_frequency_callback, pattern="^set_freq_"))

    # ConversationHandler –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∞–¥–º–∏–Ω—É
    user_conv = ConversationHandler(
        entry_points=[CallbackQueryHandler(contact_admin_callback, pattern="^contact_admin$")],
        states={
            CONTACT_MESSAGE: [MessageHandler(filters.TEXT | filters.PHOTO, admin_message_received)]
        },
        fallbacks=[CommandHandler("cancel", cancel_contact)]
    )
    application.add_handler(user_conv)

    # ConversationHandler –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    admin_conv = ConversationHandler(
        entry_points=[CallbackQueryHandler(admin_reply_start_callback, pattern="^reply_")],
        states={
            ADMIN_REPLY: [MessageHandler(filters.TEXT | filters.PHOTO, admin_reply_received)]
        },
        fallbacks=[CommandHandler("cancel", admin_reply_received)]
    )
    application.add_handler(admin_conv)

    application.run_polling()


if __name__ == '__main__':
    main()
